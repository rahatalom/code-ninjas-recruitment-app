{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_DATA } from \"../types\";\nvar initialState = {\n  data: []\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.data\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/ec2-user/environment/Bassara/src/redux/reducers/fetchDataReducer.js"],"names":["FETCH_DATA","initialState","data","state","action","type"],"mappings":";;;;;;AAAA,SAASA,UAAT;AAEA,IAAMC,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAArB;AAEA,eAAe,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,UAAL;AACE,6CAAWG,KAAX;AAAkBD,QAAAA,IAAI,EAAEE,MAAM,CAACF;AAA/B;;AACF;AACE,aAAOC,KAAP;AAJJ;AAMD","sourcesContent":["import { FETCH_DATA } from \"../types\";\n\nconst initialState = { data: [] };\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case FETCH_DATA:\n      return {...state, data: action.data }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
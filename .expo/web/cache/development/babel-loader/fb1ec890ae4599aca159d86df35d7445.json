{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { APPLY_ADJUSTMENTS } from \"../types\";\nvar initialState = {\n  shouldIncreaseTextSize: false,\n  isColourBlind: false,\n  isDyslexic: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case APPLY_ADJUSTMENTS:\n      console.log(\"font: \" + action.payload.fontToggle);\n      console.log(\"colour: \" + action.payload.colourToggle);\n      console.log(\"dys: \" + action.payload.dyslexiaToggle);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        shouldIncreaseTextSize: action.payload.fontToggle,\n        isColourBlind: action.payload.colourToggle,\n        isDyslexic: action.payload.dyslexiaToggle\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/ec2-user/environment/Bassara/src/redux/reducers/applyAdjustmentsReducer.js"],"names":["APPLY_ADJUSTMENTS","initialState","shouldIncreaseTextSize","isColourBlind","isDyslexic","state","action","type","console","log","payload","fontToggle","colourToggle","dyslexiaToggle"],"mappings":";;;;;;AAAA,SAAQA,iBAAR;AAEA,IAAMC,YAAY,GAAG;AAACC,EAAAA,sBAAsB,EAAE,KAAzB;AAAgCC,EAAAA,aAAa,EAAE,KAA/C;AAAsDC,EAAAA,UAAU,EAAE;AAAlE,CAArB;AAEA,eAAe,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,iBAAL;AACEQ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAASH,MAAM,CAACI,OAAP,CAAeC,UAApC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAWH,MAAM,CAACI,OAAP,CAAeE,YAAtC;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAQH,MAAM,CAACI,OAAP,CAAeG,cAAnC;AACA,6CACKR,KADL;AAEEH,QAAAA,sBAAsB,EAAEI,MAAM,CAACI,OAAP,CAAeC,UAFzC;AAGER,QAAAA,aAAa,EAAEG,MAAM,CAACI,OAAP,CAAeE,YAHhC;AAIER,QAAAA,UAAU,EAAEE,MAAM,CAACI,OAAP,CAAeG;AAJ7B;;AAMF;AACE,aAAOR,KAAP;AAZJ;AAcD","sourcesContent":["import {APPLY_ADJUSTMENTS} from \"../types\";\n\nconst initialState = {shouldIncreaseTextSize: false, isColourBlind: false, isDyslexic: false};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case APPLY_ADJUSTMENTS:\n      console.log(\"font: \"+action.payload.fontToggle);\n      console.log(\"colour: \"+action.payload.colourToggle);\n      console.log(\"dys: \"+action.payload.dyslexiaToggle);\n      return {\n        ...state,\n        shouldIncreaseTextSize: action.payload.fontToggle,\n        isColourBlind: action.payload.colourToggle,\n        isDyslexic: action.payload.dyslexiaToggle,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}